---
import { getCollection } from "astro:content";
import { SITE } from "@config";
import getPageNumbers from "@utils/getPageNumbers";
import getSortedPosts from "@utils/getSortedPosts";
import i18next, { t, changeLanguage } from "i18next";
import PostDetails from "@layouts/PostDetails.astro";
import Posts from "@layouts/Posts.astro";
import slugify from "@utils/slugify";
import type { CollectionEntry } from "astro:content";

changeLanguage("en");

interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection(
    "blog",
    ({ id, data }) =>
      id.startsWith(`${i18next.language}/`) &&
      data.categories.includes("snippet")
  );
  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));
  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));
  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const tPageTitle = t("snippets.title");
const tPageDesc = t("snippets.description");
const posts = await getCollection(
  "blog",
  ({ id, data }) =>
    id.startsWith(`${i18next.language}/`) && data.categories.includes("snippet")
);
const sortedPosts = getSortedPosts(posts);
const totalPages = getPageNumbers(sortedPosts.length);
const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;
const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails category="snippet" post={post} />
  ) : (
    <Posts
      baseUrl="snippets"
      category="snippets"
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
      pageTitle={tPageTitle}
      pageDescription={tPageDesc}
    />
  )
}
